class SPPF_D(nn.Module):
    def __init__(self, in_channels, out_channels, k=5):
        super(SPPF_M1, self).__init__()
        # 第一个卷积层
        self.ela=ELA(in_channels,phi='B')
        self.conv1 = Conv(in_channels, in_channels // 2, 1, s=1, padding=0)
        # 原分支的卷积层，修正输入通道数
        self.conv2 = Conv(in_channels // 2 * 7, out_channels, 1, s=1, padding=0)
        # 新分支的膨胀卷积层
        self.dilated_conv = Conv(in_channels // 2, in_channels // 2, k=3, s=1, padding=2, d=3)
        # 新分支的平均池化层
        self.avg_pool = nn.AvgPool2d(kernel_size=k, stride=1, padding=k // 2)
        self.maxpool = nn.MaxPool2d(kernel_size=k, stride=1, padding=k // 2)


    def forward(self, x):
        # 第一个卷积层
        ela=self.ela(x)
        x = self.conv1(ela)
        # 新分支
        new_branch = self.dilated_conv(x)
        new_branch1 = self.avg_pool(new_branch)
        new_branch2 = self.avg_pool(new_branch1)
        new_branch3 = self.avg_pool(new_branch2)
        # 原分支
        x1 = self.dilated_conv(x)
        x2 = self.maxpool(x1)
        x3 = self.maxpool(x2)
        x4=self.maxpool(x3)
        # 拼接原分支和新分支
        concat = torch.cat([x, x2, x3, x4,new_branch1,new_branch2,new_branch3], dim=1)
        # 最后一个卷积层
        out = self.conv2(concat)
        return out
